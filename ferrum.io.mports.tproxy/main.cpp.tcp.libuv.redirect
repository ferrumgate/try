#include "flog.h"
#include "fsocketMPort.h"

using namespace Ferrum;

#define DEFAULT_PORT 9000
#define DEFAULT_BACKLOG 128

uv_loop_t *loop;
struct sockaddr_in addr;

typedef struct {
  uv_write_t req;
  uv_buf_t buf;
} write_req_t;

void free_write_req(uv_write_t *req) {
  write_req_t *wr = (write_req_t *)req;
  free(wr->buf.base);
  free(wr);
}

void alloc_buffer(uv_handle_t *handle, size_t suggested_size, uv_buf_t *buf) {
  buf->base = (char *)malloc(suggested_size);
  buf->len = suggested_size;
}

void echo_write(uv_write_t *req, int status) {
  if (status) {
    fprintf(stderr, "Write error %s\n", uv_strerror(status));
  }
  free_write_req(req);
}

void echo_read(uv_stream_t *client, ssize_t nread, const uv_buf_t *buf) {
  if (nread > 0) {
    write_req_t *req = (write_req_t *)malloc(sizeof(write_req_t));
    req->buf = uv_buf_init(buf->base, nread);
    uv_write((uv_write_t *)req, client, &req->buf, 1, echo_write);
    return;
  }
  if (nread < 0) {
    if (nread != UV_EOF) fprintf(stderr, "Read error %s\n", uv_err_name(nread));
    uv_close((uv_handle_t *)client, NULL);
  }

  free(buf->base);
}
#include <netinet/in.h>
#include <linux/netfilter_ipv4.h>
void on_new_connection(uv_stream_t *server, int status) {
  if (status < 0) {
    fprintf(stderr, "New connection error %s\n", uv_strerror(status));
    // error!
    return;
  }
  std::cout << "new connection" << std::endl;
  uv_tcp_t *client = (uv_tcp_t *)malloc(sizeof(uv_tcp_t));
  uv_tcp_init(loop, client);
  if (uv_accept(server, (uv_stream_t *)client) == 0) {
    int sockfd;
    uv_fileno((const uv_handle_t *)client, &sockfd);

    struct sockaddr_in orig_dst;
    socklen_t orig_dst_len = sizeof(orig_dst);
    // Get the original destination address

    if (getsockopt(sockfd, SOL_IP, SO_ORIGINAL_DST, &orig_dst, &orig_dst_len) == -1) {
      perror("getsockopt SO_ORIGINAL_DST");
      close(sockfd);
      return;
    }

    /*
        if (getsockname(sockfd, (struct sockaddr *)&orig_dst, &orig_dst_len) == -1) {
          perror("getsockname");
          uv_close((uv_handle_t *)client, NULL);
          free(client);
          return;
        }
        */

    char orig_dst_ip[INET_ADDRSTRLEN];
    inet_ntop(AF_INET, &(orig_dst.sin_addr), orig_dst_ip, INET_ADDRSTRLEN);
    int orig_dst_port = ntohs(orig_dst.sin_port);

    std::cout << "Original destination IP: " << orig_dst_ip << std::endl;
    std::cout << "Original destination port: " << orig_dst_port << std::endl;

    uv_read_start((uv_stream_t *)client, alloc_buffer, echo_read);
  } else {
    uv_close((uv_handle_t *)client, NULL);
  }
}

int main(int, char **) {
  loop = uv_default_loop();

  uv_tcp_t server;
  uv_tcp_init(loop, &server);

  uv_ip4_addr("0.0.0.0", 9000, &addr);
  int namelen = sizeof(addr);
  int sockfd;
  uv_fileno((const uv_handle_t *)&server, &sockfd);
  setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, &sockfd, sizeof(sockfd));
  setsockopt(sockfd, SOL_SOCKET, SO_REUSEPORT, &sockfd, sizeof(sockfd));
  int val = 1;
  setsockopt(sockfd, SOL_IP, SO_ORIGINAL_DST, &val, sizeof(val));

  uv_tcp_bind(&server, (const struct sockaddr *)&addr, 0);

  int r = uv_listen((uv_stream_t *)&server, DEFAULT_BACKLOG, on_new_connection);
  if (r) {
    fprintf(stderr, "Listen error %s\n", uv_strerror(r));
    return 1;
  }
  return uv_run(loop, UV_RUN_DEFAULT);
}

void on_read(uv_udp_t *req, ssize_t nread, const uv_buf_t *buf, const struct sockaddr *addr, unsigned flags) {
  if (nread < 0) {
    fprintf(stderr, "Read error %s\n", uv_err_name(nread));
    uv_close((uv_handle_t *)req, NULL);
    free(buf->base);
    return;
  }

  free(buf->base);
}
